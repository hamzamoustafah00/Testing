{
	"info": {
		"_postman_id": "new-id",
		"name": "Library Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "new-exporter-id"
	},
	"item": [
		{
			"name": "Login as admin",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"thomas@nodehill.com\",\n    \"password\": \"12345678\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Setup all test data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Test data to use, pasted from our json file with test data",
							"let testData = {",
							"  \"counter\": 0,",
							"  \"authors\": [",
							"    {",
							"      \"name\": \"J.K. Rowling\",",
							"      \"biography\": \"British author, best known for the Harry Potter series.\"",
							"    },",
							"    {",
							"      \"name\": \"George R.R. Martin\",",
							"      \"biography\": \"American novelist and short-story writer, screenwriter, and television producer.\"",
							"    },",
							"    {",
							"      \"name\": \"J.R.R. Tolkien\",",
							"      \"biography\": \"English writer, poet, philologist, and academic, best known for The Lord of the Rings.\"",
							"    }",
							"  ],",
							"  \"books\": [",
							"    {",
							"      \"title\": \"Harry Potter and the Philosopher's Stone\",",
							"      \"description\": \"The first novel in the Harry Potter series.\",",
							"      \"price\": 20,",
							"      \"authorId\": \"J.K. Rowling\"",
							"    }",
							"  ],",
							"  \"reviews\": [",
							"    {",
							"      \"review\": \"Amazing book!\",",
							"      \"bookId\": \"Harry Potter and the Philosopher's Stone\",",
							"      \"userId\": 1",
							"    }",
							"  ]",
							"}",
							"",
							"// Set the test data as a collection variable",
							"pm.collectionVariables.set(\"testData\",testData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Not doing any tests here"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001"
				}
			},
			"response": []
		},
		{
			"name": "Create authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current author",
							"let author = testData.authors[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that affected rows equals 1",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {",
							"    pm.expect(responseData.rowsAffected).to.equal(1);",
							"});",
							"",
							"// Test that we get an insert id back",
							"// also add the id in our test data (for future tests)",
							"pm.test(\"We should get an insertId back\", () => {",
							"    pm.expect(responseData.insertId).to.be.a('number');",
							"    // Add the property id to the author with the",
							"    // id received from the REST-api",
							"    author.id = responseData.insertId;",
							"    // Log",
							"    console.log(\"The author has been created\", author);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more authors - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.authors[testData.counter]){",
							"    pm.execution.setNextRequest(\"Create authors\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All authors have been created.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current author",
							"let author = testData.authors[testData.counter];",
							"",
							"// pm variables have a scope of one request",
							"// setting two variables used in the body",
							"pm.variables.set(\"name\", author.name);",
							"pm.variables.set(\"biography\", author.biography);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"biography\": \"{{biography}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/authors",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get authors",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current author",
							"let author = testData.authors[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", author.id); "
						],
						"type": "text/javascript",
						"packages": {}


					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current author",
							"let author = testData.authors[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that the correct author is received",
							"pm.test(\"We should get the correct author back\", () => {",
							"    pm.expect(responseData.id).to.equal(author.id);",
							"    pm.expect(responseData.name).to.equal(author.name);",
							"    pm.expect(responseData.biography).to.equal(author.biography);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more authors - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.authors[testData.counter]){",
							"    pm.execution.setNextRequest(\"Get authors\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All authors have been received.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/authors/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"authors",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current book",
							"let book = testData.books[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that affected rows equals 1",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {",
							"    pm.expect(responseData.rowsAffected).to.equal(1);",
							"});",
							"",
							"// Test that we get an insert id back",
							"// also add the id in our test data (for future tests)",
							"pm.test(\"We should get an insertId back\", () => {",
							"    pm.expect(responseData.insertId).to.be.a('number');",
							"    // Add the property id to the book with the",
							"    // id received from the REST-api",
							"    book.id = responseData.insertId;",
							"    // Log",
							"    console.log(\"The book has been created\", book);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more books - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.books[testData.counter]){",
							"    pm.execution.setNextRequest(\"Create books\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All books have been created.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current book",
							"let book = testData.books[testData.counter];",
							"",
							"// pm variables have a scope of one request",
							"// setting two variables used in the body",
							"pm.variables.set(\"title\", book.title);",
							"pm.variables.set(\"description\", book.description);",
							"pm.variables.set(\"price\", book.price);",
							"pm.variables.set(\"authorId\", book.authorId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{title}}\",\n    \"description\": \"{{description}}\",\n    \"price\": {{price}},\n    \"authorId\": {{authorId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/books",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current book",
							"let book = testData.books[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", book.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current book",
							"let book = testData.books[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that the correct book is received",
							"pm.test(\"We should get the correct book back\", () => {",
							"    pm.expect(responseData.id).to.equal(book.id);",
							"    pm.expect(responseData.title).to.equal(book.title);",
							"    pm.expect(responseData.description).to.equal(book.description);",
							"    pm.expect(responseData.price).to.equal(book.price);",
							"    pm.expect(responseData.authorId).to.equal(book.authorId);",
							"});",
						

	"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more books - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.books[testData.counter]){",
							"    pm.execution.setNextRequest(\"Get books\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All books have been received.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}
